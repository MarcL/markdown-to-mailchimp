// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`markdown should return the expect error if no file is found 1`] = `
Object {
  "errors": Array [
    "Error: ENOENT: no such file or directory, open '/Users/littlm07/projects/business/markdown-to-mailchimp/tests/fixtures/invalidFile.md'",
  ],
}
`;

exports[`markdown when ignoring Mailchimp tags should convert Mailchimp tag to <em> tag in converted HTML 1`] = `
Object {
  "frontmatter": Object {
    "fromName": "Test User",
    "preview": "Preview text for the email",
    "replyTo": "test@test.com",
    "subject": "Email subject line",
    "title": "Title of the email campaign in Mailchimp",
  },
  "html": "<p>Hi <em>|FNAME|</em>,</p>
",
  "markdown": "
Hi *|FNAME|*,
",
}
`;

exports[`markdown when ignoring Mailchimp tags should convert link to expected tag in converted HTML 1`] = `
Object {
  "frontmatter": Object {
    "fromName": "Test User",
    "preview": "Preview text for the email",
    "replyTo": "test@test.com",
    "subject": "Email subject line",
    "title": "Title of the email campaign in Mailchimp",
  },
  "html": "<p>Testing link in markdown: <a href=\\"https://test.com/path/to/api?param=*%7CMC:DATE%7C*&amp;another=true&amp;test=lets%20test\\">link</a></p>
",
  "markdown": "
Testing link in markdown: [link](https://test.com/path/to/api?param=*|MC:DATE|*&another=true&test=lets%20test)
",
}
`;

exports[`markdown when ignoring Mailchimp tags should convert link with no query parameters to expected tag in converted HTML 1`] = `
Object {
  "frontmatter": Object {
    "fromName": "Test User",
    "preview": "Preview text for the email",
    "replyTo": "test@test.com",
    "subject": "Email subject line",
    "title": "Title of the email campaign in Mailchimp",
  },
  "html": "<p>Testing link in markdown: <a href=\\"https://test.com/\\">link</a></p>
",
  "markdown": "
Testing link in markdown: [link](https://test.com)
",
}
`;

exports[`markdown when keeping Mailchimp tags should convert link to expected tag in converted HTML 1`] = `
Object {
  "frontmatter": Object {
    "fromName": "Test User",
    "preview": "Preview text for the email",
    "replyTo": "test@test.com",
    "subject": "Email subject line",
    "title": "Title of the email campaign in Mailchimp",
  },
  "html": "<p>Testing link in markdown: <a href=\\"https://test.com/path/to/api/path/to/api?param=*|MC:DATE|*&amp;another=true&amp;test=lets%20test\\">link</a></p>
",
  "markdown": "
Testing link in markdown: [link](https://test.com/path/to/api?param=*|MC:DATE|*&another=true&test=lets%20test)
",
}
`;

exports[`markdown when keeping Mailchimp tags should convert link with no query parameters to expected tag in converted HTML 1`] = `
Object {
  "frontmatter": Object {
    "fromName": "Test User",
    "preview": "Preview text for the email",
    "replyTo": "test@test.com",
    "subject": "Email subject line",
    "title": "Title of the email campaign in Mailchimp",
  },
  "html": "<p>Testing link in markdown: <a href=\\"https://test.com/\\">link</a></p>
",
  "markdown": "
Testing link in markdown: [link](https://test.com)
",
}
`;

exports[`markdown when keeping Mailchimp tags should leave Mailchimp tag in converted HTML 1`] = `
Object {
  "frontmatter": Object {
    "fromName": "Test User",
    "preview": "Preview text for the email",
    "replyTo": "test@test.com",
    "subject": "Email subject line",
    "title": "Title of the email campaign in Mailchimp",
  },
  "html": "<p>Hi *|FNAME|*,</p>
",
  "markdown": "
Hi *|FNAME|*,
",
}
`;
